<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="   
            http://www.springframework.org/schema/beans  
            http://www.springframework.org/schema/beans/spring-beans.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context.xsd  
            http://www.springframework.org/schema/aop  
            http://www.springframework.org/schema/aop/spring-aop.xsd  
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 使用annotation -->
	<context:annotation-config/>
	<!-- 
		使用annotation自动注册bean,并检查@Controller ,
		@Service,@Repository注解已被注入。
	-->
	<context:component-scan base-package="cn.forever"/>
	
	<!-- 导入外部的properties文件 --> 
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	 	 <property name="locations">
	   		<list>
	   		 <value>classpath:jdbc.properties</value>
	   		 <value>classpath:redis.properties</value>
	   		</list>
  		</property>
 	</bean>
 	
	<!-- 配置SessionFactory -->    
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
	<!-- 指定hibernate的配置文件位置 -->
		<!-- 配置c3p0数据库连接池 -->
		<property name="dataSource">
			<bean class="com.mchange.v2.c3p0.ComboPooledDataSource">
				<!-- 数据连接信息 -->
				<property name="jdbcUrl" value="${jdbcUrl}"></property>
				<property name="driverClass" value="${driverClass}"></property>
				<property name="user" value="${user}"></property>
				<property name="password" value="${password}"></property>
				<!-- 其他配置 -->
				<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
				<property name="initialPoolSize" value="3"></property>
				<!--连接池中保留的最小连接数。Default: 3 -->
				<property name="minPoolSize" value="3"></property>
				<!--连接池中保留的最大连接数。Default: 15 -->
				<property name="maxPoolSize" value="20"></property>
				<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
				<property name="acquireIncrement" value="3"></property>
				<!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
				<property name="maxStatements" value="8"></property>
				<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
				<property name="maxStatementsPerConnection" value="5"></property>
				<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
				<property name="maxIdleTime" value="1800"></property>
			</bean>
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- 设置方言 -->
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
				<!-- 可以自动创建数据库表（create）,不创建（none） -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
<!-- 		<property name="annotatedClasses">
			<list>
				微信
				<value>cn.forever.model.Attention</value>
				
				博客
				<value>cn.forever.blog.model.Menu</value>
				<value>cn.forever.blog.model.User</value>
				<value>cn.forever.blog.model.Topic</value>
				<value>cn.forever.blog.model.Reply</value>
				<value>cn.forever.blog.model.RTMsg</value>
				<value>cn.forever.blog.model.Visit</value> 
				<value>cn.forever.blog.model.Memory</value> 
				
				文件管理，视频音乐相册
				<value>cn.forever.file.model.FileType</value> 
				<value>cn.forever.file.model.MyFile</value> 
				房屋租赁系统
				<value>cn.forever.houseRent.model.Collect</value> 
				<value>cn.forever.houseRent.model.Comment</value> 
				<value>cn.forever.houseRent.model.Floor</value> 
				<value>cn.forever.houseRent.model.Home</value> 
				<value>cn.forever.houseRent.model.Member</value> 
			</list>
		</property> -->
		<property name="packagesToScan">
            <list>
            	<value>cn.forever*</value>
           </list>
      	</property>
	</bean>
	<!-- 配置声明式事务管理（采用注解的方式） -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory"/>
		</property>
	</bean>
	
	<!-- 用注解来实现事务管理 -->  
    <tx:annotation-driven transaction-manager="transactionManager" /> 
    
    
	<!-- 20180223redis配置 -->  
    <!-- redis连接池 -->  
    <bean id="jedisConfig" class="redis.clients.jedis.JedisPoolConfig">   
       <property name="maxTotal" value="${redis_max_active}"></property>  
        <property name="maxIdle" value="${redis_max_idle}"></property>  
        <property name="maxWaitMillis" value="${redis_max_wait}"></property>  
        <property name="testOnBorrow" value="${redis_test_on_borrow}"></property>
    </bean>
    <!-- redis连接工厂 -->  
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">  
        <property name="hostName" value="${redis_addr}"></property>  
        <property name="port" value="${redis_port}"></property>  
        <!-- 开发环境关闭 -->
       <!--  <property name="password" value="${redis_auth}"></property> -->
        <property name="poolConfig" ref="jedisConfig"></property>  
    </bean>  
    <!-- redis操作模板，这里采用尽量面向对象的模板 -->  
   <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
        <property name="connectionFactory" ref="connectionFactory" />  
   		<!--  如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！-->  
        <property name="keySerializer">  
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
        </property>  
        <property name="valueSerializer">  
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
        </property>
    </bean> 
</beans>